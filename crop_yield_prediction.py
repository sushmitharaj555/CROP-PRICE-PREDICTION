# -*- coding: utf-8 -*-
"""CROP_YIELD_PREDICTION

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16h1GvoR14ADdsw_mM6zXkNr1EliF-8Bu
"""
import pandas as pd


df = pd.read_csv("main cpp.csv")

print(df.head())

print(df.tail())

df.columns

print(df.info())

print(df.describe())

print(df.isnull().sum())

df_cleaned = df.dropna(subset=['Area', 'Yield']).copy()
df_cleaned.loc[:, 'Production'].fillna(df_cleaned['Production'].mean(), inplace=True)
print(df_cleaned.isnull().sum())

import seaborn as sns
import matplotlib.pyplot as plt
plt.figure(figsize=(10, 6))
sns.lineplot(x='Year', y='Production', data=df, marker='o')
plt.title('Production Over the Years')
plt.xlabel('Year')
plt.ylabel('Production (Tonnes)')
plt.show()

correlation_matrix = df[['Area', 'Production', 'Yield']].corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

sns.scatterplot(x='Yield', y='Production', data=df_cleaned)
plt.title('Scatter Plot of Yield vs. Production')
plt.show()

sns.barplot(x='Season', y='Yield', data=df_cleaned)
plt.title('Average Yield by Season')
plt.show()

# Convert "Year" to string type
df_cleaned['Year'] = df_cleaned['Year'].astype(str)

# Split "Year" values by the "-" character and extract the first part
df_cleaned['Year'] = df_cleaned['Year'].str.split('-').str[0]

# Convert to numeric format
df_cleaned['Year'] = pd.to_numeric(df_cleaned['Year'], errors='coerce')

# Remove the original categorical columns before one-hot encoding
categorical_columns = ['State', 'District', 'Crop', 'Season', 'Area Units', 'Production Units']
df_encoded = pd.get_dummies(df_cleaned.drop(columns=categorical_columns), drop_first=True)

# Concatenate the one-hot encoded DataFrame with the original categorical columns
df_final = pd.concat([df_encoded, df_cleaned[categorical_columns]], axis=1)

# Check for any remaining non-numeric columns
non_numeric_columns = df_final.select_dtypes(exclude=['float64', 'int64']).columns
print("Non-numeric columns:", non_numeric_columns)

df_final

remaining_categorical_columns = df_final.select_dtypes(include=['object']).columns

# Perform one-hot encoding on remaining categorical columns
df_final_encoded = pd.get_dummies(df_final, columns=remaining_categorical_columns, drop_first=True)

non_numeric_columns_final = df_final_encoded.select_dtypes(exclude=['float64', 'int64']).columns
print("Non-numeric columns after one-hot encoding:", non_numeric_columns_final)

df_final_encoded

#outliers
from scipy import stats
numerical_columns = ['Area', 'Production', 'Yield']
z_scores = stats.zscore(df_final_encoded[numerical_columns])

# Defining a threshold for z-score, commonly Â±3
threshold = 3

# Creating a mask for outliers
outlier_mask = (z_scores > threshold).any(axis=1)

# Removing outliers from the dataset
new_df = df_final_encoded[~outlier_mask]

new_df

# Check if outliers are removed
original_rows = df_cleaned.shape[0]
cleaned_rows = new_df.shape[0]

if cleaned_rows < original_rows:
    print("Outliers have been removed.")
    print("Number of outliers removed:", original_rows - cleaned_rows)
else:
    print("No outliers were removed.")

# Split the dataset into features (x) and target (y)
x = new_df.drop(columns=['Production'])  # Features (all columns except 'Production')
y = new_df['Production']

#Training and testing sets
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

print("Shapes of training and testing sets:")
print("x_train:", x_train.shape)
print("y_train:", y_train.shape)
print("x_test:", x_test.shape)
print("y_test:", y_test.shape)

y_test.dtypes

from sklearn.linear_model import LinearRegression, Lasso, Ridge
from sklearn.neighbors import KNeighborsRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, r2_score

def train_evaluate_model(model, x_train, y_train, x_test, y_test):
    model.fit(x_train, y_train)
    y_pred = model.predict(x_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    return mse, r2

models = {
    'Linear Regression': LinearRegression(),
    'Lasso': Lasso(),
    'Ridge': Ridge(),
    'KNeighbors Regressor': KNeighborsRegressor(),
    'Decision Tree Regressor': DecisionTreeRegressor()
}

for name, model in models.items():
    mse, r2 = train_evaluate_model(model, x_train, y_train, x_test, y_test)
    print(f"{name} - MSE: {mse}, R2 Score: {r2}")



x_train.shape

# Define the selected features
selected_features = ['Year', 'Area', 'Crop_Rice', 'Crop_Wheat', 'Crop_Maize', 'Crop_Sugarcane',
                     'Crop_Potato', 'Crop_Coconut', 'Season_Rabi', 'Season_Kharif',
                     'Season_Summer', 'Season_Whole Year', 'Yield']

# Reduce the training dataset to the selected features
x_train_reduced = x_train[selected_features]

# Check the shape of the reduced training dataset
print("Shape of reduced training dataset:", x_train_reduced.shape)

x_test.shape

x_test_reduced = x_test[selected_features]

# Check the shape of the reduced training dataset
print("Shape of reduced testing dataset:", x_test_reduced.shape)

#select model
dtr = DecisionTreeRegressor()
dtr.fit(x_train_reduced,y_train)
dtr.predict(x_test_reduced)

import numpy as np

# Collect input from the user
year = int(input("Enter the year: "))
area = float(input("Enter the area: "))
crop_rice = int(input("Enter the crop_Rice (0 for False, 1 for True): "))
crop_wheat = int(input("Enter the crop_Wheat (0 for False, 1 for True): "))
crop_maize = int(input("Enter the crop_Maize (0 for False, 1 for True): "))
crop_sugarcane = int(input("Enter the crop_Sugarcane (0 for False, 1 for True): "))
crop_potato = int(input("Enter the crop_Potato (0 for False, 1 for True): "))
crop_coconut = int(input("Enter the crop_Coconut (0 for False, 1 for True): "))
season_rabi = int(input("Enter the season_Rabi (0 for False, 1 for True): "))
season_kharif = int(input("Enter the season_Kharif (0 for False, 1 for True): "))
season_summer = int(input("Enter the season_Summer (0 for False, 1 for True): "))
season_whole_year = int(input("Enter the season_Whole Year (0 for False, 1 for True): "))
yield_value = float(input("Enter the yield: "))

input_features = np.array([[year, area, crop_rice, crop_wheat, crop_maize, crop_sugarcane,
                             crop_potato, crop_coconut, season_rabi, season_kharif,
                             season_summer, season_whole_year, yield_value]])

# Make prediction
predicted_yield = dtr.predict(input_features)

print("Predicted crop yield:", predicted_yield)

import pickle
pickle.dump(dtr,open("model.pkl","wb"))